<?xml version="1.0" encoding="UTF-8"?>
<templates>
    <t t-name="task_manager.TaskDashboard">
        <div class="task-dashboard h-100 d-flex flex-column p-3">
            <!-- Dashboard Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="m-0">Task Dashboard</h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" t-on-click="toggleTaskModal">
                        <i class="fa fa-plus me-1" /> Add Task
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" t-on-click="refreshData">
                        <i class="fa fa-refresh" />
                    </button>
                </div>
            </div>
            
            <!-- Task Creation/Edit Modal -->
            <div t-if="state.showTaskModal" class="task-modal-backdrop" t-on-click="closeTaskModal">
                <div class="task-modal-dialog" t-on-click.stop="" t-on-keydown="onFormKeydown">
                    <div class="task-modal-content">
                        <div class="task-modal-header">
                            <h5 class="task-modal-title">
                                <t t-if="state.editTaskId">Edit Task</t>
                                <t t-else="">New Task</t>
                            </h5>
                            <button type="button" class="btn-close" t-on-click="closeTaskModal" aria-label="Close"></button>
                        </div>
                        <div class="task-modal-body">
                            <div class="mb-3">
                                <label class="form-label">Task Title</label>
                                <input type="text" class="form-control" 
                                       placeholder="Enter task title" 
                                       t-model="state.newTask.name"
                                       autofocus="true" />
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Priority</label>
                                    <select class="form-select custom-select" t-model="state.newTask.priority">
                                        <option value="0">Low Priority</option>
                                        <option value="1">Normal Priority</option>
                                        <option value="2">High Priority</option>
                                        <option value="3">Urgent</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Deadline</label>
                                    <div class="input-group date-picker-group">
                                        <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                        <input type="datetime-local" class="form-control date-input" 
                                               t-model="state.newTask.deadline" />
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Assigned To</label>
                                <select class="form-select custom-select" t-model="state.newTask.user_id">
                                    <option value="">Unassigned</option>
                                    <t t-foreach="state.users" t-as="user" t-key="user.id">
                                        <option t-att-value="user.id" t-esc="user.name" />
                                    </t>
                                </select>
                            </div>
                        </div>
                        <div class="task-modal-footer">
                            <button class="btn btn-secondary" t-on-click="closeTaskModal">
                                Cancel
                            </button>
                            <button class="btn btn-primary" t-on-click="createTask">
                                <t t-if="state.editTaskId">Update</t><t t-else="">Create</t>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Task Statistics Cards -->
            <div class="row mb-4">
                <div class="col-12 col-md-4 col-lg-2 mb-3 mb-lg-0">
                    <div class="card h-100 shadow-sm border-0 task-card" t-on-click="() => this.openTasks()">
                        <div class="card-body text-center">
                            <h1 class="mb-0 text-primary" t-esc="state.taskData.total || 0"/>
                            <p class="card-text text-muted">Total Tasks</p>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4 col-lg-2 mb-3 mb-lg-0">
                    <div class="card h-100 shadow-sm border-0 task-card" t-on-click="() => this.openTasks('draft')">
                        <div class="card-body text-center">
                            <h1 class="mb-0 text-info" t-esc="state.taskData.new || 0"/>
                            <p class="card-text text-muted">New</p>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4 col-lg-2 mb-3 mb-lg-0">
                    <div class="card h-100 shadow-sm border-0 task-card" t-on-click="() => this.openTasks('in_progress')">
                        <div class="card-body text-center">
                            <h1 class="mb-0 text-warning" t-esc="state.taskData.in_progress || 0"/>
                            <p class="card-text text-muted">In Progress</p>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4 col-lg-2 mb-3 mb-lg-0">
                    <div class="card h-100 shadow-sm border-0 task-card" t-on-click="() => this.openTasks('done')">
                        <div class="card-body text-center">
                            <h1 class="mb-0 text-success" t-esc="state.taskData.done || 0"/>
                            <p class="card-text text-muted">Done</p>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4 col-lg-2 mb-3 mb-lg-0">
                    <div class="card h-100 shadow-sm border-0 task-card" t-on-click="() => this.openTasks('cancelled')">
                        <div class="card-body text-center">
                            <h1 class="mb-0 text-secondary" t-esc="state.taskData.cancelled || 0"/>
                            <p class="card-text text-muted">Cancelled</p>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-4 col-lg-2 mb-3 mb-lg-0">
                    <div class="card h-100 shadow-sm border-0 bg-danger-subtle task-card" t-on-click="openOverdueTasks">
                        <div class="card-body text-center">
                            <h1 class="mb-0 text-danger" t-esc="state.taskData.overdue || 0"/>
                            <p class="card-text text-muted">Overdue</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Task List -->
            <div class="row">
                <div class="col-12">
                    <div class="card shadow-sm border-0 task-list-card">
                        <div class="card-header bg-white border-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title m-0">My Tasks</h5>
                                <div class="btn-group" role="group">
                                    <button t-att-class="'btn btn-sm ' + (state.filterStatus === 'all' ? 'btn-primary' : 'btn-outline-primary')" 
                                            t-on-click="() => this.filterTasks('all')">
                                        All
                                    </button>
                                    <button t-att-class="'btn btn-sm ' + (state.filterStatus === 'draft' ? 'btn-primary' : 'btn-outline-primary')" 
                                            t-on-click="() => this.filterTasks('draft')">
                                        New
                                    </button>
                                    <button t-att-class="'btn btn-sm ' + (state.filterStatus === 'in_progress' ? 'btn-primary' : 'btn-outline-primary')" 
                                            t-on-click="() => this.filterTasks('in_progress')">
                                        In Progress
                                    </button>
                                    <button t-att-class="'btn btn-sm ' + (state.filterStatus === 'done' ? 'btn-primary' : 'btn-outline-primary')" 
                                            t-on-click="() => this.filterTasks('done')">
                                        Done
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <div t-if="state.isLoading" class="text-center p-5">
                                <i class="fa fa-spinner fa-spin fa-2x" />
                                <p>Loading tasks...</p>
                            </div>
                            <div t-elif="getFilteredTasks().length === 0" class="text-center p-5">
                                <div class="text-muted">
                                    <i class="fa fa-tasks fa-3x mb-3"></i>
                                    <p>No tasks found. Click "Add Task" to create your first task.</p>
                                </div>
                            </div>
                            <div t-else="" class="task-list">
                                <div t-foreach="getFilteredTasks()" t-as="task" t-key="task.id" 
                                     class="task-item p-3 border-bottom d-flex align-items-center">
                                    <div class="me-3">
                                        <div t-if="task.state === 'done'" 
                                             class="task-checkbox rounded-circle bg-success text-white">
                                            <i class="fa fa-check" />
                                        </div>
                                        <div t-elif="task.state === 'in_progress'" 
                                             class="task-checkbox rounded-circle bg-warning" 
                                             t-on-click="() => this.markTaskDone(task.id)">
                                        </div>
                                        <div t-else="" 
                                             class="task-checkbox rounded-circle border" 
                                             t-on-click="() => this.startTask(task.id)">
                                        </div>
                                    </div>
                                    <div class="flex-grow-1" t-att-class="{'text-decoration-line-through': task.state === 'done' || task.state === 'cancelled'}">
                                        <div class="d-flex flex-wrap align-items-center">
                                            <h6 class="mb-0 me-2" t-esc="task.name" />
                                            <span t-if="task.priority !== '1'" 
                                                  t-att-class="'badge rounded-pill me-2 ' + getPriorityClass(task.priority)" 
                                                  t-esc="getPriorityName(task.priority)" />
                                        </div>
                                        <div class="text-muted small mt-1">
                                            <span t-if="task.deadline" class="me-3">
                                                <i class="fa fa-calendar me-1" />
                                                <t t-esc="formatDateTime(task.deadline)" />
                                                <i t-if="task.is_overdue" class="fa fa-exclamation-circle text-danger ms-1" title="Overdue"></i>
                                            </span>
                                            <span t-if="task.state === 'draft'" class="badge bg-info">New</span>
                                            <span t-elif="task.state === 'in_progress'" class="badge bg-warning">In Progress</span>
                                            <span t-elif="task.state === 'done'" class="badge bg-success">Done</span>
                                            <span t-elif="task.state === 'cancelled'" class="badge bg-secondary">Cancelled</span>
                                        </div>
                                    </div>
                                    <div class="task-actions">
                                        <button class="btn btn-sm btn-link text-primary" 
                                                t-on-click="() => this.editTask(task.id)" 
                                                title="Edit Task">
                                            <i class="fa fa-pencil" />
                                        </button>
                                        <button class="btn btn-sm btn-link text-danger" 
                                                t-on-click="() => this.confirmDeleteTask(task.id, task.name)" 
                                                title="Delete Task">
                                            <i class="fa fa-trash" />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Snackbar for notifications -->
            <div t-if="state.showSnackbar" class="snackbar shadow">
                <span t-esc="state.snackbarMessage" />
            </div>

            <!-- Delete Confirmation Modal -->
            <div t-if="state.showDeleteModal" class="delete-modal-backdrop" t-on-click="cancelDelete">
                <div class="delete-modal-dialog" t-on-click.stop="">
                    <div class="delete-modal-content">
                        <div class="delete-modal-header">
                            <h5 class="delete-modal-title">Confirm Delete</h5>
                            <button type="button" class="btn-close" t-on-click="cancelDelete" aria-label="Close"></button>
                        </div>
                        <div class="delete-modal-body">
                            Are you sure you want to delete task "<span t-esc="state.deleteTask.name"></span>"?
                        </div>
                        <div class="delete-modal-footer">
                            <button type="button" class="btn btn-secondary" t-on-click="cancelDelete">Cancel</button>
                            <button type="button" class="btn btn-danger" t-on-click="confirmDelete">Delete</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- CSS Styles -->
            <style>
                .task-dashboard {
                    background-color: #f5f7fa;
                }
                .task-card {
                    transition: transform 0.2s, box-shadow 0.2s;
                    cursor: pointer;
                }
                .task-card:hover {
                    transform: translateY(-3px);
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
                }
                .task-list-card {
                    height: calc(100vh - 300px);
                    overflow: hidden;
                    display: flex;
                    flex-direction: column;
                }
                .task-list {
                    overflow-y: auto;
                    max-height: calc(100vh - 370px);
                }
                .task-item {
                    transition: background-color 0.2s;
                }
                .task-item:hover {
                    background-color: rgba(0,0,0,0.02);
                }
                .task-checkbox {
                    width: 24px;
                    height: 24px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    transition: background-color 0.2s;
                }
                .task-checkbox:hover {
                    background-color: rgba(0,0,0,0.1);
                }
                .snackbar {
                    position: fixed;
                    bottom: 24px;
                    left: 50%;
                    transform: translateX(-50%);
                    background-color: #333;
                    color: white;
                    padding: 12px 24px;
                    border-radius: 4px;
                    z-index: 1050;
                    animation: fadeIn 0.3s, fadeOut 0.3s 2.7s;
                }
                
                /* Task Modal Styles - Similar to Delete Modal */
                .task-modal-backdrop {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.5);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 1050;
                    animation: fadeIn 0.2s ease-out;
                }
                
                .task-modal-dialog {
                    max-width: 500px;
                    width: 100%;
                    margin: 1.75rem auto;
                    animation: slideIn 0.3s ease-out;
                }
                
                .task-modal-content {
                    position: relative;
                    display: flex;
                    flex-direction: column;
                    background-color: #fff;
                    background-clip: padding-box;
                    border: 1px solid rgba(0, 0, 0, 0.2);
                    border-radius: 1rem;
                    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
                    overflow: hidden;
                }
                
                .task-modal-header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    padding: 1rem;
                    border-bottom: 1px solid #dee2e6;
                    background-color: #f8f9fa;
                }
                
                .task-modal-title {
                    margin: 0;
                    font-size: 1.25rem;
                    color: #212529;
                }
                
                .task-modal-body {
                    position: relative;
                    flex: 1 1 auto;
                    padding: 1.5rem;
                }
                
                .task-modal-footer {
                    display: flex;
                    align-items: center;
                    justify-content: flex-end;
                    padding: 1rem;
                    border-top: 1px solid #dee2e6;
                    gap: 0.5rem;
                    background-color: #f8f9fa;
                }
                
                /* Enhanced form styling */
                .custom-select {
                    cursor: pointer;
                    background-position: right 0.75rem center;
                    background-size: 16px 12px;
                }
                
                .date-picker-group {
                    box-shadow: 0 2px 5px rgba(0,0,0,0.08);
                    border-radius: 4px;
                    overflow: hidden;
                }
                
                .date-picker-group .input-group-text {
                    background-color: #f8f9fa;
                    border-right: none;
                }
                
                .date-input {
                    border-left: none;
                    padding-left: 0;
                }
                
                /* Delete modal styles */
                .delete-modal-backdrop {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.5);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 1050;
                    animation: fadeIn 0.2s ease-out;
                }
                
                .delete-modal-dialog {
                    max-width: 400px;
                    width: 100%;
                    margin: 1.75rem auto;
                    animation: slideIn 0.3s ease-out;
                }
                
                .delete-modal-content {
                    position: relative;
                    display: flex;
                    flex-direction: column;
                    background-color: #fff;
                    background-clip: padding-box;
                    border: 1px solid rgba(0, 0, 0, 0.2);
                    border-radius: 1rem;
                    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
                    overflow: hidden;
                }
                
                .delete-modal-header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    padding: 1rem;
                    border-bottom: 1px solid #dee2e6;
                }
                
                .delete-modal-title {
                    margin: 0;
                    font-size: 1.25rem;
                }
                
                .delete-modal-body {
                    position: relative;
                    flex: 1 1 auto;
                    padding: 1.5rem;
                }
                
                .delete-modal-footer {
                    display: flex;
                    align-items: center;
                    justify-content: flex-end;
                    padding: 1rem;
                    border-top: 1px solid #dee2e6;
                    gap: 0.5rem;
                }
                
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                
                @keyframes slideIn {
                    from {
                        transform: translateY(-30px);
                        opacity: 0;
                    }
                    to {
                        transform: translateY(0);
                        opacity: 1;
                    }
                }
                
                @keyframes fadeOut {
                    from { opacity: 1; transform: translate(-50%, 0); }
                    to { opacity: 0; transform: translate(-50%, 20px); }
                }
            </style>
        </div>
    </t>
</templates> 